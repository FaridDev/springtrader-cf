description = 'springtrader-cf'

apply plugin: 'base'
apply plugin: 'idea'



buildscript {

   repositories {

       maven { url 'http://repo.springsource.org/plugins-release' }

   }

   dependencies {
       classpath 'io.spring.gradle:docbook-reference-plugin:0.3.1'
   }

}

allprojects {
	group = 'org.springframework.nanotrader'
	
	repositories {
		flatDir dirs: ["${gradle.gradleHomeDir}/lib"]
                maven { url  'http://repo.springsource.org' }
		maven { url  'http://maven.springframework.org/release' }
		maven { url  'http://repo.springsource.org/libs-milestone' }
		maven { url  'http://spring-roo-repository.springsource.org/release' }
		mavenCentral()
		maven { url 'http://maven.springframework.org/snapshot' }
		maven { url 'http://repo.springsource.org/snapshot'}
	}
}


subprojects { subproject ->

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin:'eclipse-wtp'
	
	// ensure JDK 7 compatibility
	sourceCompatibility=1.7
	targetCompatibility=1.7
	ext.aspectjVersion = '1.6.12.M2'
	ext.cglibVersion = '2.2'
	ext.commonsLangVersion = '3.0.1'
	ext.easymockVersion = '2.3'
	ext.jacksonVersion = '1.9.2'
	ext.junitVersion = '4.8.2'
	ext.log4jVersion = '1.2.12'
	ext.mockitoVersion = '1.9.0'
	ext.springVersion = '3.2.6.RELEASE'
	ext.springSecurityVersion = '3.1.0.RELEASE'
	ext.springIntegrationVersion = '2.2.6.RELEASE'
	ext.springCloudVersion = '1.1.1.RELEASE'
	ext.javaxInjectVersion = '1'
	ext.servletApiVersion = '2.5'

	// add the natures and builders to your project
	eclipse.project {
		natures 'org.eclipse.wst.common.project.facet.core.nature', 'org.eclipse.wst.common.modulecore.ModuleCoreNature'
		natures += 'org.springframework.ide.eclipse.core.springnature'
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
		buildCommand 'org.eclipse.wst.validation.validationbuilder'
	}
        eclipse {
		classpath {
			defaultOutputDir = file('build')
		}
	}

	sourceSets {
		test {
			resources {
				srcDirs = [
					'src/test/resources',
					'src/test/java'
				]
			}
		}
	}

	// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
	// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
	configurations { jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
	}

	// dependencies that are common across all java projects
	dependencies {
		compile "org.slf4j:slf4j-log4j12:1.6.4"
		testCompile "cglib:cglib-nodep:$cglibVersion"
		testCompile "junit:junit-dep:$junitVersion"
		testCompile "log4j:log4j:$log4jVersion"
		testCompile "org.easymock:easymock:$easymockVersion"
		testCompile "org.easymock:easymockclassextension:$easymockVersion"
		
		testCompile "org.mockito:mockito-all:$mockitoVersion"
		testCompile "org.springframework:spring-test:$springVersion"
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.3.201107060350", classifier: "runtime"
	}

	// enable all compiler warnings; individual projects may customize further
	[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:-options']

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.nanotrader.*"
		//		jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000'
		systemProperties['spring.profiles.active'] = 'test'
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	artifacts {
		archives sourcesJar
	}

	install {
		repositories.mavenInstaller { customizePom(pom, subproject) }
	}

}

task cleanDist(type: Delete)  {
   description "Deletes $rootDir/dist directory"
   delete file("$rootDir/dist")
}

project('spring-nanotrader-service-support') {
	description = 'Spring Nanotrader Data Service Support'

	dependencies {
		testCompile project(':spring-nanotrader-data').sourceSets.test.output
		
		compile project(":spring-nanotrader-data")
		compile "org.springframework.integration:spring-integration-amqp:$springIntegrationVersion"
		compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
		compile  "joda-time:joda-time:1.6"
	        compile "net.schmizz:sshj:0.8.1"
        }
}

project('spring-nanotrader-data') {
	description = 'Spring Nanotrader Data'
	dependencies {
		// Spring Cloud
		compile "org.springframework.cloud:spring-cloud-spring-service-connector:$springCloudVersion"
		compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:$springCloudVersion"
		compile ("org.springframework.cloud:spring-cloud-starter-eureka:1.0.0.RELEASE") {
			exclude module: 'spring-cloud-starter'
		}
		compile ("org.springframework.cloud:spring-cloud-starter-hystrix:1.0.3.RELEASE") {
			exclude module: 'spring-cloud-starter'
		}

		compile "org.springframework:spring-web:$springVersion"
		compile "org.aspectj:aspectjrt:$aspectjVersion"
		compile "org.springframework:spring-aspects:$springVersion"
		compile "org.springframework.integration:spring-integration-amqp:$springIntegrationVersion"
		compile "org.apache.commons:commons-lang3:$commonsLangVersion"
		compile "javax.validation:validation-api:1.0.0.GA"
		testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
		compile "com.netflix.feign:feign-core:6.1.3"
		compile "com.netflix.feign:feign-jackson:6.1.3"
		compile "com.netflix.feign:feign-gson:8.5.0"
		compile "com.google.code.gson:gson:2.3.1"
		compile "com.jayway.jsonpath:json-path:0.9.1"
		compile "joda-time:joda-time:2.5"
	}
}

project('spring-nanotrader-services') {
	apply plugin: 'war'

	description = 'Spring Nanotrader Services'
        
	dependencies {
		testCompile project(':spring-nanotrader-data').sourceSets.test.output
		compile project(":spring-nanotrader-service-support")
		compile "org.springframework:spring-webmvc:$springVersion"
		providedCompile  ("javax.servlet:servlet-api:$servletApiVersion")
		compile "com.jayway.jsonpath:json-path:0.8.1"
		compile "cglib:cglib-nodep:$cglibVersion"
		compile "org.springframework.security:spring-security-web:$springSecurityVersion" 
		compile "org.springframework.security:spring-security-config:$springSecurityVersion" 
		compile "org.codehaus.jackson:jackson-mapper-asl:1.8.5"
		compile "javax.inject:javax.inject:$javaxInjectVersion"
		testCompile "org.springframework:spring-test:$springVersion"
		testCompile "org.hamcrest:hamcrest-all:1.1"
		compile "org.aspectj:aspectjweaver:$aspectjVersion"
	}
        task release(dependsOn: assemble) << {
            copy {
                description "Copy artifacts to $rootDir/dist"
                from war.archivePath
                into file("$rootDir/dist") 
            }
        }
}

project('spring-nanotrader-web') {
	apply plugin: 'war'
	description = 'Spring Nanotrader Web'
	task tar(type: Tar) {
	  from 'src/main/webapp'
	  compression = Compression.GZIP
          destinationDir = file("build/libs")
	}
	artifacts {
	    archives tar
	}
	dependencies {
		// Spring Cloud
		compile "org.springframework.cloud:spring-cloud-spring-service-connector:$springCloudVersion"
		compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:$springCloudVersion"

		compile "org.springframework:spring-webmvc:$springVersion"
		providedCompile  ("javax.servlet:servlet-api:$servletApiVersion")
		compile "javax.servlet:jstl:1.2"
		compile "org.codehaus.jackson:jackson-mapper-asl:1.8.5"
	}
        task release(dependsOn: assemble) << {
            copy {
                description "Copy artifacts to $rootDir/dist"
                from war.archivePath
                from tar.archivePath
                into file("$rootDir/dist") 
            }
        }
}


project('spring-nanotrader-asynch-services') {
	apply plugin: 'war'

	description = 'Spring Nanotrader Asynch Services'
	dependencies {
		testCompile project(':spring-nanotrader-data').sourceSets.test.output
		compile project(":spring-nanotrader-service-support")
		compile "org.springframework:spring-webmvc:$springVersion"
		providedCompile  ("javax.servlet:servlet-api:$servletApiVersion")
		compile "com.jayway.jsonpath:json-path:0.8.1"
		compile "cglib:cglib-nodep:$cglibVersion"
		compile "org.codehaus.jackson:jackson-mapper-asl:1.8.5"
		compile "javax.inject:javax.inject:$javaxInjectVersion"
		testCompile "org.springframework:spring-test:$springVersion"
		compile "org.aspectj:aspectjweaver:$aspectjVersion"

	}
        task release(dependsOn: assemble) << {
            copy {
                description "Copy artifacts to $rootDir/dist"
                from war.archivePath
                into file("$rootDir/dist") 
            }
        }
}


apply plugin: 'docbook-reference'

reference { ext.sourceDir = file('src/reference/docbook') }

apply plugin: 'sonar'

sonar {

	if (rootProject.hasProperty('sonarHostUrl')) {
		server.url = rootProject.sonarHostUrl
	}

	database {
		if (rootProject.hasProperty('sonarJdbcUrl')) {
			url = rootProject.sonarJdbcUrl
		}
		if (rootProject.hasProperty('sonarJdbcDriver')) {
			driverClassName = rootProject.sonarJdbcDriver
		}
		if (rootProject.hasProperty('sonarJdbcUsername')) {
			username = rootProject.sonarJdbcUsername
		}
		if (rootProject.hasProperty('sonarJdbcPassword')) {
			password = rootProject.sonarJdbcPassword
		}
	}

	project {
		dynamicAnalysis  = "reuseReports"
		withProjectProperties { props ->
			props["sonar.core.codeCoveragePlugin"] = "jacoco"
			props["sonar.jacoco.reportPath"]       = "${buildDirName}/jacoco.exec"
		}
	}

	logger.info("Sonar parameters used: server.url='${server.url}'; database.url='${database.url}'; database.driverClassName='${database.driverClassName}'; database.username='${database.username}'")

}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs distribution archives.'
}

task wrapper(type: Wrapper) {
   gradleVersion = '2.4'
}

def customizePom(def pom, def gradleProject) {
	pom.whenConfigured { generatedPom ->
		// respect 'optional' and 'provided' dependencies
		def deps = gradleProject.configurations.runtime.allDependencies
		def optionalDeps = deps.findAll { dep ->
			dep.asDynamicObject.hasProperty('optional') && dep.optional
		}
		def providedDeps = deps.findAll { dep ->
			dep.asDynamicObject.hasProperty('provided') && dep.provided
		}
		generatedPom.dependencies.each { mavenDep ->
			mavenDep.optional = optionalDeps.any { optionalDep ->
				optionalDep.group == mavenDep.groupId &&
						optionalDep.name == mavenDep.artifactId &&
						optionalDep.version == mavenDep.version
			}
			boolean isProvided = providedDeps.any { providedDep ->
				providedDep.group == mavenDep.groupId &&
						providedDep.name == mavenDep.artifactId &&
						providedDep.version == mavenDep.version
			}
			if (isProvided) {
				mavenDep.scope = 'provided'
			}
		}

		// eliminate test-scoped dependencies (no need in maven central poms)
		generatedPom.dependencies.removeAll { dep ->
			dep.scope == 'test'
		}

		// add all items necessary for maven central publication
		generatedPom.project {
			name = gradleProject.description
			description = gradleProject.description
			url = 'https://github.com/SpringSource/spring-nanotrader'
			organization {
				name = 'SpringSource'
				url = 'http://springsource.org'
			}
			licenses {
				license {
					name 'The Apache Software License, Version 2.0'
					url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
			scm {
				url = 'https://github.com/SpringSource/nanotrader'
				connection = 'scm:git:git://github.com/SpringSource/nanotrader'
				developerConnection = 'scm:git:git://github.com/SpringSource/nanotrader'
			}
			developers {
				developer {
					id = 'dussab'
					name = 'Brian Dussault'
					email = 'bdussault@vmware.com'
				}
				developer {
					id = 'garyrussell'
					name = 'Gary Russell'
					email = 'grussell@vmware.com'
				}
			}
		}
	}
}

